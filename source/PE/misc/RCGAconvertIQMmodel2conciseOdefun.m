function RCGAconvertIQMmodel2conciseOdefun(model)
% RCGAconvertIQMmodel2conciseOdefun converts model (an IQMmodel object or
% an SBML file) into a concise odefun.
% 
% [SYNTAX]
% model = RCGAconvertIQMmodel2conciseOdefun(model)
% 
% [INPUT]
% model :  An IQM object or the name of a SBML file.


% Reading an IQMmodel object or an SBML file
ModelStruct = struct(IQMmodel(model));
n_state = length(ModelStruct.states);
n_param = length(ModelStruct.parameters);
n_variable = length(ModelStruct.variables);
n_reaction = length(ModelStruct.reactions);


funname = [ModelStruct.name '_conciseOdefun'];


% Opening an output file
temp = [funname '.m'];
fileID = fopen(temp,'w');

if fileID == -1
    error('Cannot open %s!',temp);
end


% Making header
fprintf(fileID,'function dydt = %s(t, y)\n',funname);


% Making comment lines
fprintf(fileID,'%% This function was generated by the function\n%% RCGAconvertIQMmodel2conciseOdefun');
if ischar(model)
    fprintf(fileID,' from %s.\n',model);
else
    fprintf(fileID,'.\n');
end
fprintf(fileID,'%% %s\n',date);
fprintf(fileID,'%% \n');
fprintf(fileID,'%% You can simulate the model coded in this function by the following codes.\n');
fprintf(fileID,'%% tspan = [0 10];\n');
for i = 1 : n_state
    fprintf(fileID,'%% y0(%d) = %e;\n',i,ModelStruct.states(i).initialCondition);
end
fprintf(fileID,'%% [T, Y] = ode15s(@%s,tspan,y0);\n',funname);
fprintf(fileID,'%% plot(T, Y);\n');
fprintf(fileID,'%% xlabel(''Time'');\n');
fprintf(fileID,'%% ylabel(''States'');\n');
fprintf(fileID,'%% legend(');
for i = 1 : n_state - 1
    fprintf(fileID,'''%s'',',ModelStruct.states(i).name);
end
fprintf(fileID,'''%s'');\n',ModelStruct.states(n_state).name);
fprintf(fileID,'\n\n');


% Below is active codes
for i = 1 : n_state
    fprintf(fileID,'%s = y(%d);\n',ModelStruct.states(i).name,i);
end
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN NAME ===\n');
fprintf(fileID,'%% %s\n',ModelStruct.name);
fprintf(fileID,'%% === END NAME ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN NOTES ===\n');
fprintf(fileID,'%% %s\n',ModelStruct.notes);
fprintf(fileID,'%% === END NOTES ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN INITIAL CONDITION ===\n');
for i = 1 : n_state
    fprintf(fileID,'%s_0 = %e;\n',ModelStruct.states(i).name,ModelStruct.states(i).initialCondition);
end
fprintf(fileID,'%% === END INITIAL CONDITION ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN PARAMETERS ===\n');
for i = 1 : n_param
    fprintf(fileID,'%s = %e;\n',ModelStruct.parameters(i).name,ModelStruct.parameters(i).value);
end
fprintf(fileID,'%% === END PARAMETERS ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN VARIABLES ===\n');
for i = 1 : n_variable
    fprintf(fileID,'%s = %s;\n',ModelStruct.variables(i).name,ModelStruct.variables(i).formula);
end
fprintf(fileID,'%% === END VARIABLES ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN REACTIONS ===\n');
for i = 1 : n_reaction
    fprintf(fileID,'%s = %s;\n',ModelStruct.reactions(i).name,ModelStruct.reactions(i).formula);
end
fprintf(fileID,'%% === END REACTIONS ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'%% === BEGIN BALANCE ===\n');
for i = 1 : n_state
    fprintf(fileID,'%s_dot = %s;\n',ModelStruct.states(i).name,ModelStruct.states(i).ODE);
end
fprintf(fileID,'%% === END BALANCE ===\n');
fprintf(fileID,'\n');


fprintf(fileID,'dydt = zeros(%d,1);\n',n_state);
for i = 1 : n_state
    fprintf(fileID,'dydt(%d) = %s_dot;\n',i,ModelStruct.states(i).name);
end


fclose(fileID);
